@page "/Checkout"
@using ShopOnline.Web.Services


<h3 class="mb-5">Checkout</h3>
<div class="row">
    <div class="col-md-6" style="display:@DisplayButtons" >
        <h4 class="mb-2">Payment Method</h4>
        <button class="btn btn-success"
                @onclick="CheckoutPro">
            <b>Pagar con Mercado Pago</b>
        </button>
        <!-- Aquí se debe colocar el contenedor que Mercado Pago utilizará -->
        <div id="wallet_container"></div>  <!-- Contenedor para Mercado Pago -->
       
    </div>

@if (ShoppingCartItems == null)
{
        <DisplaySpinner/>
    }
    else
    {
        <div class="col-md-6">
            <h4 class="mb-2">Payment Summary</h4>
            @if (ShoppingCartItems.Count() > 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var item in ShoppingCartItems)
                        {
                            <tr>
                                <td>@item.Qty x @item.ProductName</td>
                                <td>@item.TotalPrice.ToString("C")</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td><b>@PaymentAmount.ToString("C")</b></td>
                        </tr>
                    </tbody>
                </table>
            }
            else
            {
                <p>You currently have no items in your shopping cart</p>
            }
        </div>
}
</div>
@code {

    [Inject]
    public IJSRuntime Js { get; set; }

    [Inject]
    protected IPaymentService paymentService { get; set; }

    protected IEnumerable<CartItemDto> ShoppingCartItems { get; set; }

    protected int TotalQty { get; set; }

    protected string PaymentDescription { get; set; }

    protected decimal PaymentAmount { get; set; }

    [Inject]
    public IShoppingCartService ShoppingCartService { get; set; }


    protected string DisplayButtons { get; set; } = "block";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ShoppingCartItems = await ShoppingCartService.GetItems(HardCoded.UserId);

            if (ShoppingCartItems != null && ShoppingCartItems.Count() > 0)
            {
                Guid orderGuid = Guid.NewGuid();

                PaymentAmount = ShoppingCartItems.Sum(p => p.TotalPrice);
                TotalQty = ShoppingCartItems.Sum(p => p.Qty);
                PaymentDescription = $"O_{HardCoded.UserId}_{orderGuid}";

            }
            else
            {
                DisplayButtons = "none";
            }

        }
        catch (Exception)
        {
            //Log exception
            throw;
        }
    }

    private async Task CheckoutPro()

    {

        // Crear un objeto PaymentRequestDto para enviar los datos al backend
        var paymentRequest = new PaymentRequestDto
            {
                Title = PaymentDescription,  // Título del pago
                Quantity = TotalQty,                 // Cantidad total de productos
                Price = PaymentAmount                // Precio total
        
            };

        // Invocar el servicio para crear la preferencia de pago en MercadoPago
        var preferenceId = await paymentService.CreatePayment(paymentRequest);
        Console.WriteLine($"Preference to MercadoPago: Title={paymentRequest.Title}, Price={paymentRequest.Price}");

        // Llamar a la función de JavaScript para iniciar el checkout con MercadoPago
        await Js.InvokeVoidAsync("initializeMercadoPago", preferenceId);
    }

   
    
}