@page "/ShoppingCart"
@using ShopOnline.Web.Services.Contracts


@if (ShoppingCartItems == null && ErrorMessage == null)
{
    <DisplaySpinner></DisplaySpinner>
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage ="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Shopping Cart</h3>
    <div class = "row mb-5">
        <div class ="col-md-9">
            @foreach(var item in ShoppingCartItems)
            {
                <div class="row mb-4">
                    <div class="col-md-4">
                        <img src="@item.ProductImageURL" width="300" class="img-thumbnail">
                    </div>
                    <div class = "col-md-8">
                        <h5>@item.ProductName</h5>
                        <div class="mb-4">@item.ProductDescription</div>
                        <span>Price: <b>@item.Price.ToString("C")</b></span>
                        <div>
                            <a href="#" class="btn btn-danger sm" @onclick="(async () =>await  DeleteCartItem_Click(item.Id))">
                                <span class="oi oi-credit-card"></span>Eliminar
                            </a>

                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-3">
            <h5>Cart Summary</h5>
            <div class="mt-2">
                <div>Total - </div>
                <a href="#" class="btn btn-success">
                    <span class="oi oi-credit-card"></span>&nbsp; Proceed to Checkout 
                </a>
            </div>
        </div>
    </div>
}



@code {

    [Inject]
    public IShoppingCartService ShoppingCartService { get; set; }

    public IEnumerable<CartItemDto> ShoppingCartItems { get; set; }

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ShoppingCartItems = await ShoppingCartService.GetItems(HardCoded.UserId);

        }
        catch (Exception ex)
        {

            ErrorMessage = ex.Message;
        }
    }

    protected async Task DeleteCartItem_Click(int id)
    {
        var cartItemDto = await ShoppingCartService.DeleteItem(id);


    }
}
